################################################## 
# PostalWSSimple_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# PostalMethods
##############################

class ns0:
    targetNamespace = "PostalMethods"

    class GetLetterStatusResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "GetLetterStatusResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetLetterStatusResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"LastUpdateTime"), aname="_LastUpdateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._Status = None
                    self._LastUpdateTime = None
                    return
            Holder.__name__ = "GetLetterStatusResult_Holder"
            self.pyclass = Holder

    class GetLetterStatus_MultipleResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "GetLetterStatus_MultipleResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetLetterStatus_MultipleResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("PostalMethods","ArrayOfLetterStatus",lazy=False)(pname=(ns,"LetterStatuses"), aname="_LetterStatuses", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._LetterStatuses = None
                    return
            Holder.__name__ = "GetLetterStatus_MultipleResult_Holder"
            self.pyclass = Holder

    class ArrayOfLetterStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "ArrayOfLetterStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfLetterStatus_Def.schema
            TClist = [GTD("PostalMethods","LetterStatus",lazy=False)(pname=(ns,"LetterStatus"), aname="_LetterStatus", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LetterStatus = []
                    return
            Holder.__name__ = "ArrayOfLetterStatus_Holder"
            self.pyclass = Holder

    class LetterStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "LetterStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LetterStatus_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ID"), aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"LastUpdateTime"), aname="_LastUpdateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ID = None
                    self._Status = None
                    self._LastUpdateTime = None
                    return
            Holder.__name__ = "LetterStatus_Holder"
            self.pyclass = Holder

    class GetLetterStatus_RangeResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "GetLetterStatus_RangeResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetLetterStatus_RangeResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("PostalMethods","ArrayOfLetterStatus",lazy=False)(pname=(ns,"LetterStatuses"), aname="_LetterStatuses", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._LetterStatuses = None
                    return
            Holder.__name__ = "GetLetterStatus_RangeResult_Holder"
            self.pyclass = Holder

    class GetLetterDetailsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "GetLetterDetailsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetLetterDetailsResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ID"), aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Price"), aname="_Price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"NumOfSheets"), aname="_NumOfSheets", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"SubmitTime"), aname="_SubmitTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"CompletionTime"), aname="_CompletionTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Orientation"), aname="_Orientation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Envelope"), aname="_Envelope", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Paper"), aname="_Paper", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PrintColor"), aname="_PrintColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PrintSides"), aname="_PrintSides", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NationalMailing"), aname="_NationalMailing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"InternationalMailing"), aname="_InternationalMailing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._ID = None
                    self._Price = None
                    self._NumOfSheets = None
                    self._SubmitTime = None
                    self._CompletionTime = None
                    self._Orientation = None
                    self._Envelope = None
                    self._Paper = None
                    self._PrintColor = None
                    self._PrintSides = None
                    self._NationalMailing = None
                    self._InternationalMailing = None
                    return
            Holder.__name__ = "GetLetterDetailsResult_Holder"
            self.pyclass = Holder

    class GetPDFResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "GetPDFResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetPDFResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"FileData"), aname="_FileData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._FileData = None
                    return
            Holder.__name__ = "GetPDFResult_Holder"
            self.pyclass = Holder

    class WorkMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "WorkMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetLetterDetailsV2Result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "GetLetterDetailsV2Result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetLetterDetailsV2Result_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ID"), aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Price"), aname="_Price", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"NumOfSheets"), aname="_NumOfSheets", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"SubmitTime"), aname="_SubmitTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"CompletionTime"), aname="_CompletionTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Orientation"), aname="_Orientation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Envelope"), aname="_Envelope", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Paper"), aname="_Paper", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PrintColor"), aname="_PrintColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PrintSides"), aname="_PrintSides", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NationalMailing"), aname="_NationalMailing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"InternationalMailing"), aname="_InternationalMailing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("PostalMethods","DetailsWorkMode",lazy=False)(pname=(ns,"WorkMode"), aname="_WorkMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._ID = None
                    self._Price = None
                    self._NumOfSheets = None
                    self._SubmitTime = None
                    self._CompletionTime = None
                    self._Orientation = None
                    self._Envelope = None
                    self._Paper = None
                    self._PrintColor = None
                    self._PrintSides = None
                    self._NationalMailing = None
                    self._InternationalMailing = None
                    self._WorkMode = None
                    return
            Holder.__name__ = "GetLetterDetailsV2Result_Holder"
            self.pyclass = Holder

    class DetailsWorkMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "DetailsWorkMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetLetterStatusV2Result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "GetLetterStatusV2Result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetLetterStatusV2Result_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"LastUpdateTime"), aname="_LastUpdateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._Status = None
                    self._Description = None
                    self._LastUpdateTime = None
                    return
            Holder.__name__ = "GetLetterStatusV2Result_Holder"
            self.pyclass = Holder

    class GetLetterStatusV2_MultipleResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "GetLetterStatusV2_MultipleResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetLetterStatusV2_MultipleResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("PostalMethods","ArrayOfLetterStatusAndDesc",lazy=False)(pname=(ns,"LetterStatuses"), aname="_LetterStatuses", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._LetterStatuses = None
                    return
            Holder.__name__ = "GetLetterStatusV2_MultipleResult_Holder"
            self.pyclass = Holder

    class ArrayOfLetterStatusAndDesc_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "ArrayOfLetterStatusAndDesc")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfLetterStatusAndDesc_Def.schema
            TClist = [GTD("PostalMethods","LetterStatusAndDesc",lazy=False)(pname=(ns,"LetterStatusAndDesc"), aname="_LetterStatusAndDesc", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LetterStatusAndDesc = []
                    return
            Holder.__name__ = "ArrayOfLetterStatusAndDesc_Holder"
            self.pyclass = Holder

    class LetterStatusAndDesc_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "LetterStatusAndDesc")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LetterStatusAndDesc_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ID"), aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"LastUpdateTime"), aname="_LastUpdateTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ID = None
                    self._Status = None
                    self._Description = None
                    self._LastUpdateTime = None
                    return
            Holder.__name__ = "LetterStatusAndDesc_Holder"
            self.pyclass = Holder

    class GetLetterStatusV2_RangeResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "PostalMethods"
        type = (schema, "GetLetterStatusV2_RangeResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.GetLetterStatusV2_RangeResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("PostalMethods","ArrayOfLetterStatusAndDesc",lazy=False)(pname=(ns,"LetterStatuses"), aname="_LetterStatuses", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._LetterStatuses = None
                    return
            Holder.__name__ = "GetLetterStatusV2_RangeResult_Holder"
            self.pyclass = Holder

    class SendLetter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendLetter"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.SendLetter_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MyDescription"), aname="_MyDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FileExtension"), aname="_FileExtension", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"FileBinaryData"), aname="_FileBinaryData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","SendLetter")
            kw["aname"] = "_SendLetter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._MyDescription = None
                    self._FileExtension = None
                    self._FileBinaryData = None
                    return
            Holder.__name__ = "SendLetter_Holder"
            self.pyclass = Holder

    class SendLetterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendLetterResponse"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.SendLetterResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"SendLetterResult"), aname="_SendLetterResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","SendLetterResponse")
            kw["aname"] = "_SendLetterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendLetterResult = None
                    return
            Holder.__name__ = "SendLetterResponse_Holder"
            self.pyclass = Holder

    class SendLetterAndAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendLetterAndAddress"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.SendLetterAndAddress_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MyDescription"), aname="_MyDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FileExtension"), aname="_FileExtension", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"FileBinaryData"), aname="_FileBinaryData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AttentionLine1"), aname="_AttentionLine1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AttentionLine2"), aname="_AttentionLine2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AttentionLine3"), aname="_AttentionLine3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Company"), aname="_Company", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Address1"), aname="_Address1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Address2"), aname="_Address2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"City"), aname="_City", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"State"), aname="_State", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PostalCode"), aname="_PostalCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Country"), aname="_Country", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","SendLetterAndAddress")
            kw["aname"] = "_SendLetterAndAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._MyDescription = None
                    self._FileExtension = None
                    self._FileBinaryData = None
                    self._AttentionLine1 = None
                    self._AttentionLine2 = None
                    self._AttentionLine3 = None
                    self._Company = None
                    self._Address1 = None
                    self._Address2 = None
                    self._City = None
                    self._State = None
                    self._PostalCode = None
                    self._Country = None
                    return
            Holder.__name__ = "SendLetterAndAddress_Holder"
            self.pyclass = Holder

    class SendLetterAndAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendLetterAndAddressResponse"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.SendLetterAndAddressResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"SendLetterAndAddressResult"), aname="_SendLetterAndAddressResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","SendLetterAndAddressResponse")
            kw["aname"] = "_SendLetterAndAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendLetterAndAddressResult = None
                    return
            Holder.__name__ = "SendLetterAndAddressResponse_Holder"
            self.pyclass = Holder

    class GetLetterStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatus"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatus_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ID"), aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatus")
            kw["aname"] = "_GetLetterStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._ID = None
                    return
            Holder.__name__ = "GetLetterStatus_Holder"
            self.pyclass = Holder

    class GetLetterStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatusResponse"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatusResponse_Dec.schema
            TClist = [GTD("PostalMethods","GetLetterStatusResult",lazy=False)(pname=(ns,"GetLetterStatusResult"), aname="_GetLetterStatusResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatusResponse")
            kw["aname"] = "_GetLetterStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetLetterStatusResult = None
                    return
            Holder.__name__ = "GetLetterStatusResponse_Holder"
            self.pyclass = Holder

    class GetLetterStatus_Multiple_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatus_Multiple"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatus_Multiple_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ID"), aname="_ID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatus_Multiple")
            kw["aname"] = "_GetLetterStatus_Multiple"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._ID = None
                    return
            Holder.__name__ = "GetLetterStatus_Multiple_Holder"
            self.pyclass = Holder

    class GetLetterStatus_MultipleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatus_MultipleResponse"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatus_MultipleResponse_Dec.schema
            TClist = [GTD("PostalMethods","GetLetterStatus_MultipleResult",lazy=False)(pname=(ns,"GetLetterStatus_MultipleResult"), aname="_GetLetterStatus_MultipleResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatus_MultipleResponse")
            kw["aname"] = "_GetLetterStatus_MultipleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetLetterStatus_MultipleResult = None
                    return
            Holder.__name__ = "GetLetterStatus_MultipleResponse_Holder"
            self.pyclass = Holder

    class GetLetterStatus_Range_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatus_Range"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatus_Range_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MinID"), aname="_MinID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MaxID"), aname="_MaxID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatus_Range")
            kw["aname"] = "_GetLetterStatus_Range"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._MinID = None
                    self._MaxID = None
                    return
            Holder.__name__ = "GetLetterStatus_Range_Holder"
            self.pyclass = Holder

    class GetLetterStatus_RangeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatus_RangeResponse"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatus_RangeResponse_Dec.schema
            TClist = [GTD("PostalMethods","GetLetterStatus_RangeResult",lazy=False)(pname=(ns,"GetLetterStatus_RangeResult"), aname="_GetLetterStatus_RangeResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatus_RangeResponse")
            kw["aname"] = "_GetLetterStatus_RangeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetLetterStatus_RangeResult = None
                    return
            Holder.__name__ = "GetLetterStatus_RangeResponse_Holder"
            self.pyclass = Holder

    class GetLetterDetails_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterDetails"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterDetails_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ID"), aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterDetails")
            kw["aname"] = "_GetLetterDetails"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._ID = None
                    return
            Holder.__name__ = "GetLetterDetails_Holder"
            self.pyclass = Holder

    class GetLetterDetailsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterDetailsResponse"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterDetailsResponse_Dec.schema
            TClist = [GTD("PostalMethods","GetLetterDetailsResult",lazy=False)(pname=(ns,"GetLetterDetailsResult"), aname="_GetLetterDetailsResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterDetailsResponse")
            kw["aname"] = "_GetLetterDetailsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetLetterDetailsResult = None
                    return
            Holder.__name__ = "GetLetterDetailsResponse_Holder"
            self.pyclass = Holder

    class GetPDF_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetPDF"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetPDF_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ID"), aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetPDF")
            kw["aname"] = "_GetPDF"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._ID = None
                    return
            Holder.__name__ = "GetPDF_Holder"
            self.pyclass = Holder

    class GetPDFResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetPDFResponse"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetPDFResponse_Dec.schema
            TClist = [GTD("PostalMethods","GetPDFResult",lazy=False)(pname=(ns,"GetPDFResult"), aname="_GetPDFResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetPDFResponse")
            kw["aname"] = "_GetPDFResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetPDFResult = None
                    return
            Holder.__name__ = "GetPDFResponse_Holder"
            self.pyclass = Holder

    class CancelDelivery_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CancelDelivery"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.CancelDelivery_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ID"), aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","CancelDelivery")
            kw["aname"] = "_CancelDelivery"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._ID = None
                    return
            Holder.__name__ = "CancelDelivery_Holder"
            self.pyclass = Holder

    class CancelDeliveryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CancelDeliveryResponse"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.CancelDeliveryResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"CancelDeliveryResult"), aname="_CancelDeliveryResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","CancelDeliveryResponse")
            kw["aname"] = "_CancelDeliveryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CancelDeliveryResult = None
                    return
            Holder.__name__ = "CancelDeliveryResponse_Holder"
            self.pyclass = Holder

    class SendLetterV2_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendLetterV2"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.SendLetterV2_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MyDescription"), aname="_MyDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FileExtension"), aname="_FileExtension", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"FileBinaryData"), aname="_FileBinaryData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("PostalMethods","WorkMode",lazy=False)(pname=(ns,"WorkMode"), aname="_WorkMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","SendLetterV2")
            kw["aname"] = "_SendLetterV2"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._MyDescription = None
                    self._FileExtension = None
                    self._FileBinaryData = None
                    self._WorkMode = None
                    return
            Holder.__name__ = "SendLetterV2_Holder"
            self.pyclass = Holder

    class SendLetterV2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendLetterV2Response"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.SendLetterV2Response_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"SendLetterV2Result"), aname="_SendLetterV2Result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","SendLetterV2Response")
            kw["aname"] = "_SendLetterV2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendLetterV2Result = None
                    return
            Holder.__name__ = "SendLetterV2Response_Holder"
            self.pyclass = Holder

    class SendLetterAndAddressV2_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendLetterAndAddressV2"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.SendLetterAndAddressV2_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MyDescription"), aname="_MyDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FileExtension"), aname="_FileExtension", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"FileBinaryData"), aname="_FileBinaryData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("PostalMethods","WorkMode",lazy=False)(pname=(ns,"WorkMode"), aname="_WorkMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AttentionLine1"), aname="_AttentionLine1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AttentionLine2"), aname="_AttentionLine2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AttentionLine3"), aname="_AttentionLine3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Company"), aname="_Company", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Address1"), aname="_Address1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Address2"), aname="_Address2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"City"), aname="_City", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"State"), aname="_State", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PostalCode"), aname="_PostalCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Country"), aname="_Country", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","SendLetterAndAddressV2")
            kw["aname"] = "_SendLetterAndAddressV2"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._MyDescription = None
                    self._FileExtension = None
                    self._FileBinaryData = None
                    self._WorkMode = None
                    self._AttentionLine1 = None
                    self._AttentionLine2 = None
                    self._AttentionLine3 = None
                    self._Company = None
                    self._Address1 = None
                    self._Address2 = None
                    self._City = None
                    self._State = None
                    self._PostalCode = None
                    self._Country = None
                    return
            Holder.__name__ = "SendLetterAndAddressV2_Holder"
            self.pyclass = Holder

    class SendLetterAndAddressV2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendLetterAndAddressV2Response"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.SendLetterAndAddressV2Response_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"SendLetterAndAddressV2Result"), aname="_SendLetterAndAddressV2Result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","SendLetterAndAddressV2Response")
            kw["aname"] = "_SendLetterAndAddressV2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendLetterAndAddressV2Result = None
                    return
            Holder.__name__ = "SendLetterAndAddressV2Response_Holder"
            self.pyclass = Holder

    class GetLetterDetailsV2_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterDetailsV2"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterDetailsV2_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ID"), aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterDetailsV2")
            kw["aname"] = "_GetLetterDetailsV2"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._ID = None
                    return
            Holder.__name__ = "GetLetterDetailsV2_Holder"
            self.pyclass = Holder

    class GetLetterDetailsV2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterDetailsV2Response"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterDetailsV2Response_Dec.schema
            TClist = [GTD("PostalMethods","GetLetterDetailsV2Result",lazy=False)(pname=(ns,"GetLetterDetailsV2Result"), aname="_GetLetterDetailsV2Result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterDetailsV2Response")
            kw["aname"] = "_GetLetterDetailsV2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetLetterDetailsV2Result = None
                    return
            Holder.__name__ = "GetLetterDetailsV2Response_Holder"
            self.pyclass = Holder

    class GetLetterStatusV2_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatusV2"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatusV2_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ID"), aname="_ID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatusV2")
            kw["aname"] = "_GetLetterStatusV2"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._ID = None
                    return
            Holder.__name__ = "GetLetterStatusV2_Holder"
            self.pyclass = Holder

    class GetLetterStatusV2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatusV2Response"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatusV2Response_Dec.schema
            TClist = [GTD("PostalMethods","GetLetterStatusV2Result",lazy=False)(pname=(ns,"GetLetterStatusV2Result"), aname="_GetLetterStatusV2Result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatusV2Response")
            kw["aname"] = "_GetLetterStatusV2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetLetterStatusV2Result = None
                    return
            Holder.__name__ = "GetLetterStatusV2Response_Holder"
            self.pyclass = Holder

    class GetLetterStatusV2_Multiple_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatusV2_Multiple"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatusV2_Multiple_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ID"), aname="_ID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatusV2_Multiple")
            kw["aname"] = "_GetLetterStatusV2_Multiple"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._ID = None
                    return
            Holder.__name__ = "GetLetterStatusV2_Multiple_Holder"
            self.pyclass = Holder

    class GetLetterStatusV2_MultipleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatusV2_MultipleResponse"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatusV2_MultipleResponse_Dec.schema
            TClist = [GTD("PostalMethods","GetLetterStatusV2_MultipleResult",lazy=False)(pname=(ns,"GetLetterStatusV2_MultipleResult"), aname="_GetLetterStatusV2_MultipleResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatusV2_MultipleResponse")
            kw["aname"] = "_GetLetterStatusV2_MultipleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetLetterStatusV2_MultipleResult = None
                    return
            Holder.__name__ = "GetLetterStatusV2_MultipleResponse_Holder"
            self.pyclass = Holder

    class GetLetterStatusV2_Range_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatusV2_Range"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatusV2_Range_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MinID"), aname="_MinID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MaxID"), aname="_MaxID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatusV2_Range")
            kw["aname"] = "_GetLetterStatusV2_Range"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._MinID = None
                    self._MaxID = None
                    return
            Holder.__name__ = "GetLetterStatusV2_Range_Holder"
            self.pyclass = Holder

    class GetLetterStatusV2_RangeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetLetterStatusV2_RangeResponse"
        schema = "PostalMethods"
        def __init__(self, **kw):
            ns = ns0.GetLetterStatusV2_RangeResponse_Dec.schema
            TClist = [GTD("PostalMethods","GetLetterStatusV2_RangeResult",lazy=False)(pname=(ns,"GetLetterStatusV2_RangeResult"), aname="_GetLetterStatusV2_RangeResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("PostalMethods","GetLetterStatusV2_RangeResponse")
            kw["aname"] = "_GetLetterStatusV2_RangeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetLetterStatusV2_RangeResult = None
                    return
            Holder.__name__ = "GetLetterStatusV2_RangeResponse_Holder"
            self.pyclass = Holder

    class int_Dec(ZSI.TCnumbers.Iint, ElementDeclaration):
        literal = "int"
        schema = "PostalMethods"
        def __init__(self, **kw):
            kw["pname"] = ("PostalMethods","int")
            kw["aname"] = "_int"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_int_immutable_holder"
            ZSI.TCnumbers.Iint.__init__(self, **kw)

    class GetLetterStatusResult_Dec(ElementDeclaration):
        literal = "GetLetterStatusResult"
        schema = "PostalMethods"
        def __init__(self, **kw):
            kw["pname"] = ("PostalMethods","GetLetterStatusResult")
            kw["aname"] = "_GetLetterStatusResult"
            if ns0.GetLetterStatusResult_Def not in ns0.GetLetterStatusResult_Dec.__bases__:
                bases = list(ns0.GetLetterStatusResult_Dec.__bases__)
                bases.insert(0, ns0.GetLetterStatusResult_Def)
                ns0.GetLetterStatusResult_Dec.__bases__ = tuple(bases)

            ns0.GetLetterStatusResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetLetterStatusResult_Dec_Holder"

    class GetLetterStatus_MultipleResult_Dec(ElementDeclaration):
        literal = "GetLetterStatus_MultipleResult"
        schema = "PostalMethods"
        def __init__(self, **kw):
            kw["pname"] = ("PostalMethods","GetLetterStatus_MultipleResult")
            kw["aname"] = "_GetLetterStatus_MultipleResult"
            if ns0.GetLetterStatus_MultipleResult_Def not in ns0.GetLetterStatus_MultipleResult_Dec.__bases__:
                bases = list(ns0.GetLetterStatus_MultipleResult_Dec.__bases__)
                bases.insert(0, ns0.GetLetterStatus_MultipleResult_Def)
                ns0.GetLetterStatus_MultipleResult_Dec.__bases__ = tuple(bases)

            ns0.GetLetterStatus_MultipleResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetLetterStatus_MultipleResult_Dec_Holder"

    class GetLetterStatus_RangeResult_Dec(ElementDeclaration):
        literal = "GetLetterStatus_RangeResult"
        schema = "PostalMethods"
        def __init__(self, **kw):
            kw["pname"] = ("PostalMethods","GetLetterStatus_RangeResult")
            kw["aname"] = "_GetLetterStatus_RangeResult"
            if ns0.GetLetterStatus_RangeResult_Def not in ns0.GetLetterStatus_RangeResult_Dec.__bases__:
                bases = list(ns0.GetLetterStatus_RangeResult_Dec.__bases__)
                bases.insert(0, ns0.GetLetterStatus_RangeResult_Def)
                ns0.GetLetterStatus_RangeResult_Dec.__bases__ = tuple(bases)

            ns0.GetLetterStatus_RangeResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetLetterStatus_RangeResult_Dec_Holder"

    class GetLetterDetailsResult_Dec(ElementDeclaration):
        literal = "GetLetterDetailsResult"
        schema = "PostalMethods"
        def __init__(self, **kw):
            kw["pname"] = ("PostalMethods","GetLetterDetailsResult")
            kw["aname"] = "_GetLetterDetailsResult"
            if ns0.GetLetterDetailsResult_Def not in ns0.GetLetterDetailsResult_Dec.__bases__:
                bases = list(ns0.GetLetterDetailsResult_Dec.__bases__)
                bases.insert(0, ns0.GetLetterDetailsResult_Def)
                ns0.GetLetterDetailsResult_Dec.__bases__ = tuple(bases)

            ns0.GetLetterDetailsResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetLetterDetailsResult_Dec_Holder"

    class GetPDFResult_Dec(ElementDeclaration):
        literal = "GetPDFResult"
        schema = "PostalMethods"
        def __init__(self, **kw):
            kw["pname"] = ("PostalMethods","GetPDFResult")
            kw["aname"] = "_GetPDFResult"
            if ns0.GetPDFResult_Def not in ns0.GetPDFResult_Dec.__bases__:
                bases = list(ns0.GetPDFResult_Dec.__bases__)
                bases.insert(0, ns0.GetPDFResult_Def)
                ns0.GetPDFResult_Dec.__bases__ = tuple(bases)

            ns0.GetPDFResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetPDFResult_Dec_Holder"

    class GetLetterDetailsV2Result_Dec(ElementDeclaration):
        literal = "GetLetterDetailsV2Result"
        schema = "PostalMethods"
        def __init__(self, **kw):
            kw["pname"] = ("PostalMethods","GetLetterDetailsV2Result")
            kw["aname"] = "_GetLetterDetailsV2Result"
            if ns0.GetLetterDetailsV2Result_Def not in ns0.GetLetterDetailsV2Result_Dec.__bases__:
                bases = list(ns0.GetLetterDetailsV2Result_Dec.__bases__)
                bases.insert(0, ns0.GetLetterDetailsV2Result_Def)
                ns0.GetLetterDetailsV2Result_Dec.__bases__ = tuple(bases)

            ns0.GetLetterDetailsV2Result_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetLetterDetailsV2Result_Dec_Holder"

    class GetLetterStatusV2Result_Dec(ElementDeclaration):
        literal = "GetLetterStatusV2Result"
        schema = "PostalMethods"
        def __init__(self, **kw):
            kw["pname"] = ("PostalMethods","GetLetterStatusV2Result")
            kw["aname"] = "_GetLetterStatusV2Result"
            if ns0.GetLetterStatusV2Result_Def not in ns0.GetLetterStatusV2Result_Dec.__bases__:
                bases = list(ns0.GetLetterStatusV2Result_Dec.__bases__)
                bases.insert(0, ns0.GetLetterStatusV2Result_Def)
                ns0.GetLetterStatusV2Result_Dec.__bases__ = tuple(bases)

            ns0.GetLetterStatusV2Result_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetLetterStatusV2Result_Dec_Holder"

    class GetLetterStatusV2_MultipleResult_Dec(ElementDeclaration):
        literal = "GetLetterStatusV2_MultipleResult"
        schema = "PostalMethods"
        def __init__(self, **kw):
            kw["pname"] = ("PostalMethods","GetLetterStatusV2_MultipleResult")
            kw["aname"] = "_GetLetterStatusV2_MultipleResult"
            if ns0.GetLetterStatusV2_MultipleResult_Def not in ns0.GetLetterStatusV2_MultipleResult_Dec.__bases__:
                bases = list(ns0.GetLetterStatusV2_MultipleResult_Dec.__bases__)
                bases.insert(0, ns0.GetLetterStatusV2_MultipleResult_Def)
                ns0.GetLetterStatusV2_MultipleResult_Dec.__bases__ = tuple(bases)

            ns0.GetLetterStatusV2_MultipleResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetLetterStatusV2_MultipleResult_Dec_Holder"

    class GetLetterStatusV2_RangeResult_Dec(ElementDeclaration):
        literal = "GetLetterStatusV2_RangeResult"
        schema = "PostalMethods"
        def __init__(self, **kw):
            kw["pname"] = ("PostalMethods","GetLetterStatusV2_RangeResult")
            kw["aname"] = "_GetLetterStatusV2_RangeResult"
            if ns0.GetLetterStatusV2_RangeResult_Def not in ns0.GetLetterStatusV2_RangeResult_Dec.__bases__:
                bases = list(ns0.GetLetterStatusV2_RangeResult_Dec.__bases__)
                bases.insert(0, ns0.GetLetterStatusV2_RangeResult_Def)
                ns0.GetLetterStatusV2_RangeResult_Dec.__bases__ = tuple(bases)

            ns0.GetLetterStatusV2_RangeResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "GetLetterStatusV2_RangeResult_Dec_Holder"

# end class ns0 (tns: PostalMethods)

##############################
# targetNamespace
# PostalMethods/AbstractTypes
##############################

class ns1:
    targetNamespace = "PostalMethods/AbstractTypes"

    class StringArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "PostalMethods/AbstractTypes"
        type = (schema, "StringArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = None(None, typed=False)
            atype = None
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

# end class ns1 (tns: PostalMethods/AbstractTypes)
